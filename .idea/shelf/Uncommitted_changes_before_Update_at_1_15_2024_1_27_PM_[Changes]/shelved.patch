Index: Red-Black Tree/Abstract.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"Node.h\"\r\nstruct Abstract{\r\npublic:\r\n    virtual void insertNode(int num);\r\n    virtual void deleteNode(int num);\r\n};
===================================================================
diff --git a/Red-Black Tree/Abstract.h b/Red-Black Tree/Abstract.h
--- a/Red-Black Tree/Abstract.h	
+++ b/Red-Black Tree/Abstract.h	
@@ -1,6 +1,6 @@
 #include "Node.h"
 struct Abstract{
 public:
-    virtual void insertNode(int num);
-    virtual void deleteNode(int num);
+    virtual void insertNode(int num) = 0;
+    virtual void deleteNode(int num) = 0;
 };
\ No newline at end of file
Index: Red-Black Tree/Implement.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"Abstract.h\"\r\nclass RedBlackTree: public Abstract{\r\n    static Node* createNode(Node* parent, int num){\r\n        return new Node{num, false, nullptr, nullptr, parent};\r\n    }\r\n    static Node* rotateLeft(Node* node){\r\n        Node* left = node->left, *leftRight = node->left->right;\r\n        left->parent = node->parent;\r\n        left->right = node;\r\n        node->parent = left;\r\n        node->right = leftRight;\r\n        leftRight->parent = node;\r\n        return left;\r\n    }\r\n    static Node* rotateRight(Node* node){\r\n        Node* right = node->right, *rightLeft = node->right->left;\r\n\r\n    }\r\npublic:\r\n};
===================================================================
diff --git a/Red-Black Tree/Implement.h b/Red-Black Tree/Implement.h
--- a/Red-Black Tree/Implement.h	
+++ b/Red-Black Tree/Implement.h	
@@ -1,20 +1,40 @@
 #include "Abstract.h"
 class RedBlackTree: public Abstract{
+    Node* root;
     static Node* createNode(Node* parent, int num){
         return new Node{num, false, nullptr, nullptr, parent};
     }
-    static Node* rotateLeft(Node* node){
-        Node* left = node->left, *leftRight = node->left->right;
-        left->parent = node->parent;
-        left->right = node;
-        node->parent = left;
-        node->right = leftRight;
-        leftRight->parent = node;
-        return left;
+    static void rotateLeft(Node* node){
+        Node* right = node->right, *rightLeft = right->left;
+        right->parent = node->parent;
+        right->left = node;
+        node->parent = right;
+        node->right = rightLeft;
+        rightLeft->parent = node;
     }
-    static Node* rotateRight(Node* node){
-        Node* right = node->right, *rightLeft = node->right->left;
-
+    static void rotateRight(Node* node) {
+        Node *right = node->right, *rightLeft = node->right->left;
+        right->parent = node->parent;
+        right->left = node;
     }
 public:
+    RedBlackTree(){
+        root = nullptr;
+    }
+
+    void insertNodeHelper(Node* node, int num){
+
+    }
+
+    void insertNode(int num) override{
+
+    }
+
+    void deleteNodeHelper(Node* node, int num){
+
+    }
+
+    void deleteNode(int num) override{
+
+    }
 };
\ No newline at end of file
